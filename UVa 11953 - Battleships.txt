// C++11 5.3.0 - GNU C++ Compiler with options: -lm -lcrypt -O2 -std=c++11 -pipe -DONLINE_JUDGE

#include <iostream>
#include <vector>
#include <cstring>
#include <algorithm>
#include <string>
#include <cstdio>
#include <unordered_map>

std::vector<std::string>grid(100);
int n;

// accept '@' & 'x' (find all cell of a ship and set it to '.')
void find_whole_ship(const int& row, const int& column)
{
    if (grid[row][column]=='x' || grid[row][column]=='@')
    {
        // set current cell to visited state
        // so we won't check current cell again
        grid[row][column]='.';

        // right
        if (column+1 < n)
            find_whole_ship(row, column+1);

        // left
        if (column-1 > -1)
            find_whole_ship(row, column-1);

        // top
        if (row-1 > -1)
            find_whole_ship(row-1, column);

        // bottom
        if (row+1 < n)
            find_whole_ship(row+1, column);
    }
}

// only accept 'x'
bool find_ship(const int& row, const int& column)
{

    // if current cell is a part of a ship
    if (grid[row][column]=='x')
    {
        // set current cell to visited state
        // so we won't check current cell again
        grid[row][column]='.';

        // right
        if (column+1 < n)
            find_whole_ship(row, column+1);

        // left
        if (column-1 > -1)
            find_whole_ship(row, column-1);

        // top
        if (row-1 > -1)
            find_whole_ship(row-1, column);

        // bottom
        if (row+1 < n)
            find_whole_ship(row+1, column);

        return true;
    }

    return false;
}

int main()
{
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(0);

    int T;
    std::cin >> T;

    for(int test_case=1; test_case<=T; ++test_case)
    {
        std::cin >> n;

        for(int i=0; i<n; ++i)
        {
            std::cin >> grid[i];
        }

        int ship_counter=0;

        for(int i=0; i<n; ++i)
        {
            for(int j=0; j<n; ++j)
            {
                if (find_ship(i, j))
                    ++ship_counter;
            }
        }

        std::cout << "Case " << test_case << ": " << ship_counter << '\n';
    }
}
